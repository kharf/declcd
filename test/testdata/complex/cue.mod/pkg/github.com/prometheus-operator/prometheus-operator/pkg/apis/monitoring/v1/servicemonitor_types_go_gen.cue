// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#ServiceMonitorsKind:   "ServiceMonitor"
#ServiceMonitorName:    "servicemonitors"
#ServiceMonitorKindKey: "servicemonitor"

// ServiceMonitor defines monitoring for a set of services.
#ServiceMonitor: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of desired Service selection for target discovery by
	// Prometheus.
	spec: #ServiceMonitorSpec @go(Spec)
}

// ServiceMonitorSpec defines the specification parameters for a ServiceMonitor.
// +k8s:openapi-gen=true
#ServiceMonitorSpec: {
	// `jobLabel` selects the label from the associated Kubernetes `Service`
	// object which will be used as the `job` label for all metrics.
	//
	// For example if `jobLabel` is set to `foo` and the Kubernetes `Service`
	// object is labeled with `foo: bar`, then Prometheus adds the `job="bar"`
	// label to all ingested metrics.
	//
	// If the value of this field is empty or if the label doesn't exist for
	// the given Service, the `job` label of the metrics defaults to the name
	// of the associated Kubernetes `Service`.
	jobLabel?: string @go(JobLabel)

	// `targetLabels` defines the labels which are transferred from the
	// associated Kubernetes `Service` object onto the ingested metrics.
	//
	// +optional
	targetLabels?: [...string] @go(TargetLabels,[]string)

	// `podTargetLabels` defines the labels which are transferred from the
	// associated Kubernetes `Pod` object onto the ingested metrics.
	//
	// +optional
	podTargetLabels?: [...string] @go(PodTargetLabels,[]string)

	// List of endpoints part of this ServiceMonitor.
	//
	// +optional
	endpoints?: [...#Endpoint] @go(Endpoints,[]Endpoint)

	// Label selector to select the Kubernetes `Endpoints` objects.
	selector: metav1.#LabelSelector @go(Selector)

	// Selector to select which namespaces the Kubernetes `Endpoints` objects
	// are discovered from.
	namespaceSelector?: #NamespaceSelector @go(NamespaceSelector)

	// `sampleLimit` defines a per-scrape limit on the number of scraped samples
	// that will be accepted.
	//
	// +optional
	sampleLimit?: null | uint64 @go(SampleLimit,*uint64)

	// `targetLimit` defines a limit on the number of scraped targets that will
	// be accepted.
	//
	// +optional
	targetLimit?: null | uint64 @go(TargetLimit,*uint64)

	// Per-scrape limit on number of labels that will be accepted for a sample.
	//
	// It requires Prometheus >= v2.27.0.
	//
	// +optional
	labelLimit?: null | uint64 @go(LabelLimit,*uint64)

	// Per-scrape limit on length of labels name that will be accepted for a sample.
	//
	// It requires Prometheus >= v2.27.0.
	//
	// +optional
	labelNameLengthLimit?: null | uint64 @go(LabelNameLengthLimit,*uint64)

	// Per-scrape limit on length of labels value that will be accepted for a sample.
	//
	// It requires Prometheus >= v2.27.0.
	//
	// +optional
	labelValueLengthLimit?: null | uint64 @go(LabelValueLengthLimit,*uint64)

	// Per-scrape limit on the number of targets dropped by relabeling
	// that will be kept in memory. 0 means no limit.
	//
	// It requires Prometheus >= v2.47.0.
	//
	// +optional
	keepDroppedTargets?: null | uint64 @go(KeepDroppedTargets,*uint64)

	// `attachMetadata` defines additional metadata which is added to the
	// discovered targets.
	//
	// It requires Prometheus >= v2.37.0.
	//
	// +optional
	attachMetadata?: null | #AttachMetadata @go(AttachMetadata,*AttachMetadata)
}

// ServiceMonitorList is a list of ServiceMonitors.
// +k8s:openapi-gen=true
#ServiceMonitorList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of ServiceMonitors
	items: [...null | #ServiceMonitor] @go(Items,[]*ServiceMonitor)
}
