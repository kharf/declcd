// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package declcd

import (
	"github.com/kharf/declcd/schema"
)

_name: "{{.Name}}"
_labels: {
	"declcd/control-plane": _name
}

// _crd is autogenerated into crd.cue
crd: schema.#Manifest & {
	content: _crd
}

ns: schema.#Manifest & {
	dependencies: [crd.id]
	content: {
		apiVersion: "v1"
		kind:       "Namespace"
		metadata: {
			name:   "declcd-system"
			labels: _labels
		}
	}
}

serviceAccount: schema.#Manifest & {
	dependencies: [ns.id]
	content: {
		apiVersion: "v1"
		kind:       "ServiceAccount"
		metadata: {
			name:      _name
			namespace: ns.content.metadata.name
			labels:    _labels
		}
	}
}

_leaderRoleName: "leader-election"
_roleGroup:      "rbac.authorization.k8s.io"
_roleApiVersion: "\(_roleGroup)/v1"
leaderRole: schema.#Manifest & {
	dependencies: [ns.id]
	content: {
		apiVersion: _roleApiVersion
		kind:       "Role"
		metadata: {
			name:      _leaderRoleName
			namespace: ns.content.metadata.name
			labels:    _labels
		}
		rules: [
			{
				apiGroups: ["coordination.k8s.io"]
				resources: ["leases"]
				verbs: [
					"get",
					"create",
					"update",
				]
			},
			{
				apiGroups: [""]
				resources: ["events"]
				verbs: [
					"create",
					"patch",
				]
			},
		]
	}
}

leaderRoleBinding: schema.#Manifest & {
	dependencies: [
		ns.id,
		leaderRole.id,
	]
	content: {
		apiVersion: _roleApiVersion
		kind:       "RoleBinding"
		metadata: {
			name:      _leaderRoleName
			namespace: ns.content.metadata.name
			labels:    _labels
		}
		roleRef: {
			apiGroup: _roleGroup
			kind:     leaderRole.content.kind
			name:     leaderRole.content.metadata.name
		}
		subjects: [
			{
				kind:      serviceAccount.content.kind
				name:      serviceAccount.content.metadata.name
				namespace: serviceAccount.content.metadata.namespace
			},
		]
	}
}

clusterRole: schema.#Manifest & {
	dependencies: [ns.id]
	content: {
		apiVersion: _roleApiVersion
		kind:       "ClusterRole"
		metadata: {
			name:      _name
			namespace: ns.content.metadata.name
			labels:    _labels
		}
		rules: [
			{
				apiGroups: ["gitops.declcd.io"]
				resources: ["gitopsprojects"]
				verbs: [
					"list",
					"watch",
				]
			},
			{
				apiGroups: ["gitops.declcd.io"]
				resources: ["gitopsprojects/status"]
				verbs: [
					"get",
					"patch",
					"update",
				]
			},
			{
				apiGroups: ["*"]
				resources: ["*"]
				verbs: [
					"*",
				]
			},
		]
	}
}

clusteRoleBinding: schema.#Manifest & {
	dependencies: [
		ns.id,
		clusterRole.id,
	]
	content: {
		apiVersion: _roleApiVersion
		kind:       "ClusterRoleBinding"
		metadata: {
			name:      _name
			namespace: ns.content.metadata.name
			labels:    _labels
		}
		roleRef: {
			apiGroup: _roleGroup
			kind:     clusterRole.content.kind
			name:     clusterRole.content.metadata.name
		}
		subjects: [
			{
				kind:      serviceAccount.content.kind
				name:      serviceAccount.content.metadata.name
				namespace: serviceAccount.content.metadata.namespace
			},
		]
	}
}

statefulSet: schema.#Manifest & {
	dependencies: [
		ns.id,
	]
	content: {
		apiVersion: "apps/v1"
		kind:       "StatefulSet"
		metadata: {
			name:      _name
			namespace: ns.content.metadata.name
			labels:    _labels
		}
		spec: {
			selector: matchLabels: _labels
			serviceName: _name
			replicas:    1
			volumeClaimTemplates: [
				{
					metadata: name: "declcd"
					spec: {
						accessModes: [
							"ReadWriteOnce",
						]
						resources: {
							requests: {
								storage: "20Mi"
							}
						}
					}
				},
			]
			template: {
				metadata: {
					labels: _labels
				}
				spec: {
					serviceAccountName: _name
					securityContext: runAsNonRoot: true
					volumes: [
						{
							name: "podinfo"
							downwardAPI: {
								items: [
									{
										path: "namespace"
										fieldRef: fieldPath: "metadata.namespace"
									},
								]
							}
						},
					]
					containers: [
						{
							name:  _name
							image: "ghcr.io/kharf/declcd:{{.Version}}"
							command: [
								"/controller",
							]
							args: [
								"--leader-elect",
								"--log-level=0",
							]
							securityContext: {
								allowPrivilegeEscalation: false
								capabilities: {
									drop: [
										"ALL",
									]
								}
							}
							resources: {
								limits: {
									memory: "1.5Gi"
								}
								requests: {
									memory: "1.5Gi"
									cpu:    "500m"
								}
							}
							ports: [
								{
									name:          "http"
									protocol:      "TCP"
									containerPort: 8080
								},
							]
							volumeMounts: [
								{
									name:      "declcd"
									mountPath: "/inventory"
								},
								{
									name:      "podinfo"
									mountPath: "/podinfo"
								},
							]
						},
					]
				}
			}
		}
	}
}

service: schema.#Manifest & {
	dependencies: [
		ns.id,
		statefulSet.id,
	]
	content: {
		apiVersion: "v1"
		kind:       "Service"
		metadata: {
			name:      _name
			namespace: ns.content.metadata.name
			labels:    _labels
		}
		spec: {
			clusterIP: "None"
			selector:  _labels
			ports: [
				{
					name:       "http"
					protocol:   "TCP"
					port:       8080
					targetPort: "http"
				},
			]
		}
	}
}
